{"meta":{"title":"MapleStory","subtitle":null,"description":null,"author":"MapleStory.zeng","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Decentralization in Bitcoin","slug":"Decentralization-in-Bitcoin","date":"2018-02-06T10:06:36.000Z","updated":"2018-02-06T12:01:27.580Z","comments":true,"path":"2018/02/06/Decentralization-in-Bitcoin/","link":"","permalink":"http://yoursite.com/2018/02/06/Decentralization-in-Bitcoin/","excerpt":"","text":"Problems to be solved Who maintains the ledger of transactions? Who has authority over which transactions are valid? Who creates new bitcoins? General Distributed consensusThere are n nodes that each have an input value. Some of these nodes are faulty or malicious. A distributed consensus protocol has the following two properties:● It must terminate with all honest nodes in agreement on the value● The value must have been generated by an honest node Imperfect Conditions in systemFirstly, consensus in general is a hard problem since nodes might crash or be outright malicious.Secondly, and specifically in the Bitcoin context, the network is highly imperfect. It’s a peer‐to‐peer system, and not all pairs of nodes are connected to each other.Finally, there’s a lot of latency in the system because it’s distributed all over the Internet. How blockchain achieved consensusFirst, it introduces the idea of incentives, which is novel for a distributed consensus protocol.Second, Bitcoin embraces the notion of randomness. Bitcoin consensus algorithm (simplified) New transactions are broadcast to all nodes Each node collects new transactions into a block In each round a r andom node gets to broadcast its block Other nodes accept the block only if all transactions in it are valid (unspent, valid signatures) Nodes express their acceptance of the block by including its hash in the next block they create Double‐spend attack In fact, the double‐spend probability decreases exponentially with the number of confirmations. So, if the transaction that you’re interested in has received k confirmations, then the probability that a double‐spend transaction will end up on the long‐term consensus chain goes down exponentially as a function of k . The most common heuristic that’s used in the Bitcoin ecosystem is to wait for six confirmations. Incentives and proof of work Block RewardAccording to the rules of Bitcoin, the node that creates a block gets to include a special transaction in that block. This transaction is a coin‐creation transaction Transaction feesSo if you’re a node that’s creating a block that contains, say, 200 transactions, then the sum of all those 200 transaction fees is paid to the address that you put into that block. Mining and proof‐of‐workThe key idea behind proof‐of‐work is that we approximate the selection of a random node by instead selecting nodes in proportion to a resource that we hope that nobody can monopolize.If, for example, that resource is computing power, then it’s a proof‐of‐work system. Alternately, it could be in proportion to ownership of the currency, and that’s called p roof‐of‐stake. Although it’s not used in Bitcoin, proof‐of‐stake is a legitimate alternate model and it’s used in other cryptocurrencies. Bitcoin achieves proof‐of‐work using hash puzzles1H(nonce || prev_hash || tx || tx || ... || tx) &lt; target","categories":[],"tags":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://yoursite.com/tags/Blockchain/"}]},{"title":"simple cryptography tools in blockchain","slug":"simple-cryptography-in-blockchain","date":"2018-02-04T14:17:09.000Z","updated":"2018-02-06T10:12:49.738Z","comments":true,"path":"2018/02/04/simple-cryptography-in-blockchain/","link":"","permalink":"http://yoursite.com/2018/02/04/simple-cryptography-in-blockchain/","excerpt":"","text":"Hash Functiontakes any string as inputfixed-sized output(usually 256 bits)efficiently computable security properties:collision-freehidingpuzzle-friendly SHA-256 Hash Pointer Merkle Tree Digital signature schemeOnly you can sign, but anyone can verify (sk, pk) := generateKeys(keysize) sig := sign(sk, message) isValid := verify(pk, message, sig)Public keys as IdentitiesA useful trick as Bitcoin do A Simple Cryptocurrency Example GoofyCoin1.Goofy, can create new coins whenever he wants and these newly created coins belong to him2.whoever owns a coin can transfer it on to someone elsedouble‐spending attack — Alice is spending the same coin twice. ScroogeCoinScrooge publishes an append‐only ledger containing the history of all the transactions that have happened.ScroogeCoin block chain.CreateCoins transaction.A PayCoins Transaction.","categories":[],"tags":[{"name":"Blockchain","slug":"Blockchain","permalink":"http://yoursite.com/tags/Blockchain/"}]},{"title":"从Systrace学习binder kernel 调用过程","slug":"Some-thing-about-binder-in-kernel","date":"2017-05-30T11:39:51.000Z","updated":"2018-02-06T13:04:39.964Z","comments":true,"path":"2017/05/30/Some-thing-about-binder-in-kernel/","link":"","permalink":"http://yoursite.com/2017/05/30/Some-thing-about-binder-in-kernel/","excerpt":"","text":"一.Systrace简介从目前使用看来，Systrace主要包含两个部分：1.手机中Systrace日志打印框架2.Chrome或其他日志解析工具，能够将上述生成的日志解析成可视化的图形其精度可以达到ns 每年的GoogleI/O好像都有提及这个方便的工具，具体的用法的官方教程如下：视频：https://www.youtube.com/watch?v=Qfo5fdoXrTU&amp;index=10&amp;list=PLWz5rJ2EKKc-odHd6XEaf7ykfsosYyCKp文字：https://developer.android.com/studio/profile/systrace.html 二.binder kernel driverbinder是android中ipc通信的主要机制其原理可以参考gityuan的博客http://gityuan.com/2015/11/01/binder-driver/http://gityuan.com/2015/11/02/binder-driver-2/ 三.Systrace in binder kernelSystrace 作为android 性能调优的主要手段在源码中随处可见如 AMS 中的 Trace.beginTrace又如 InputDispatcher 中的 ATRACE 想要抓取binder kernel的trace 首先要打开开关其路径如下：/sys/kernel/debug/tracing/events/binder/我们需要将其 enable 置为 1echo 1 &gt; enable 随后我们可以使用脚本或者android device monitor 抓取 binder kernel driver的日志 一个简单的调用过程如下其中6834 为 nfc服务的 pid，3412 为 system_servernfc服务向 ams 发起 binder通信 1.binder 驱动收到 BC_TRANSACTION 的通信请求 创建binder_transaction 结构体，分配内存，并将通信的数据写入内存 2.binder 驱动唤醒 system_server处理请求，使用 BR_TRANSACTION 的命令作为标识 system_server从队列中读取通信请求，并将结果写入内存。 3.system_server 发起 BC_REPLY 请求，该请求是 ONEWAY 的 binder驱动为新的请求分配内存，并将任务加入到目标进程的队列中 4.binder 驱动告知请求端 请求已经完成 BR_TRANSACTION_COMPLETE,并释放内存 5.binder驱动 从任务队列中读取前面 BC_REPLY 的通信任务，向服务端发起 BR_TRANSACTION_COMPLETE的请求 6.请求端处理 BR_REPLY 的请求需要注意的是每个cmd工作在那个进程中，以及其前后的调用次序 Systrace 日志：123456789101112131415161718192021222324252627com.android.nfc-6834 ( 6834) [004] ...2 1005.674370: binder_command: cmd=0x40406300 BC_TRANSACTIONcom.android.nfc-6834 ( 6834) [004] ...2 1005.674374: binder_transaction: transaction=141734 dest_node=21476 dest_proc=3412 dest_thread=0 reply=0 flags=0x10 code=0x15com.android.nfc-6834 ( 6834) [004] ...2 1005.674375: binder_transaction_alloc_buf: transaction=141734 data_size=240 offsets_size=0com.android.nfc-6834 ( 6834) [004] .N.2 1005.674385: binder_write_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674399: binder_transaction_received: transaction=141734 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674400: binder_return: cmd=0x80407202 BR_TRANSACTION Binder:3412_8-4646 ( 3412) [004] ...2 1005.674401: binder_read_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...1 1005.674403: binder_ioctl_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...1 1005.674621: binder_ioctl: cmd=0xc0306201 arg=0x7be9dd1fa8 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674623: binder_command: cmd=0x40406301 BC_REPLY Binder:3412_8-4646 ( 3412) [004] ...2 1005.674625: binder_transaction: transaction=141735 dest_node=0 dest_proc=6834 dest_thread=6834 reply=1 flags=0x0 code=0x0 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674627: binder_transaction_alloc_buf: transaction=141735 data_size=328 offsets_size=8 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674633: binder_transaction_fd: transaction=141735 src_fd=276 ==&gt; dest_fd=35 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674634: binder_write_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...1 1005.674635: binder_wait_for_work: proc_work=0 transaction_stack=0 thread_todo=1 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674636: binder_return: cmd=0x7206 BR_TRANSACTION_COMPLETE Binder:3412_8-4646 ( 3412) [004] ...2 1005.674637: binder_read_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...1 1005.674638: binder_ioctl_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...1 1005.674652: binder_ioctl: cmd=0xc0306201 arg=0x7be9dd21f8 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674653: binder_command: cmd=0x40086303 BC_FREE_BUFFER Binder:3412_8-4646 ( 3412) [004] ...2 1005.674654: binder_transaction_buffer_release: transaction=141734 data_size=240 offsets_size=0 Binder:3412_8-4646 ( 3412) [004] ...2 1005.674656: binder_write_done: ret=0 Binder:3412_8-4646 ( 3412) [004] ...1 1005.674656: binder_wait_for_work: proc_work=1 transaction_stack=0 thread_todo=0com.android.nfc-6834 ( 6834) [004] ...1 1005.674672: binder_wait_for_work: proc_work=0 transaction_stack=0 thread_todo=1com.android.nfc-6834 ( 6834) [004] ...2 1005.674673: binder_return: cmd=0x7206 BR_TRANSACTION_COMPLETEcom.android.nfc-6834 ( 6834) [004] ...2 1005.674674: binder_transaction_received: transaction=141735com.android.nfc-6834 ( 6834) [004] ...2 1005.674675: binder_return: cmd=0x80407203 BR_REPLY","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"Build Angler On New MacOs","slug":"Build-Angler-On-New-MacOs","date":"2017-01-08T11:29:27.000Z","updated":"2018-02-06T10:13:19.069Z","comments":true,"path":"2017/01/08/Build-Angler-On-New-MacOs/","link":"","permalink":"http://yoursite.com/2017/01/08/Build-Angler-On-New-MacOs/","excerpt":"","text":"Build angler on MacOSSet Proxy to Shadowsocks (not necessary)export http_proxy=socks5://127.0.0.1:1080export https_proxy=socks5://127.0.0.1:1080 Instructions https://wiki.cyanogenmod.org/w/Build_for_angler Hostshttps://laod.cn/hosts/2016-google-hosts.htmlGitHub.com 192.30.253.112 Setup Environment For building On Machttps://source.android.com/source/initializing.htmlSync the code on case-sensitive image Install sedThe sed in MacOS is different from other linuxbrew uninstall gnu-sedbrew install gnu-sed –with-default-namesYou may refer to :http://stackoverflow.com/questions/30003570/how-to-use-gnu-sed-on-mac-os-x Install mavenbrew install mavenYou may refer to:http://stackoverflow.com/questions/22031889/how-to-install-maven-to-mac-using-terminal-without-using-brew Install MacOS.sdk 10.11 or early (not necessary if you already have the right version)You may refer to:http://palanceli.com/2016/09/25/2016/0925AOSPOnMac/ Mount the case-sensitive image and start to get the source code following:https://wiki.cyanogenmod.org/w/Build_for_angler Install repo and add it to Path$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo$ chmod a+x ~/bin/reposet PATH so it includes user’s private bin if it existsif [ -d “$HOME/bin” ] ; then PATH=”$HOME/bin:$PATH”fi Init repo:$ repo init -u https://github.com/CyanogenMod/android.git -b cm-13.0Change the version as follow13.0 (Android 6.0)14.0 (Android 7.0)14.1 (Android 7.1 ) Sync repo:$repo sync -c -j8 Disable Gello build in device.mk:Cd device/huawei/anglerVim device.mkGelloPRODUCT_PACKAGES += \\ Gello Setup Building environments :Source build/envsetup.shBreakfast angler (angler is the code name for Nexus 6p)Brunch angler (start building)","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-01-08T07:08:19.000Z","updated":"2017-01-08T07:08:19.000Z","comments":true,"path":"2017/01/08/hello-world/","link":"","permalink":"http://yoursite.com/2017/01/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}